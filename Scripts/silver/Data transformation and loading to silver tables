/*
===============================================================================
exploring crm_customer_info DATA
===============================================================================
*/


--CHECKING FOR NULLS OR DUPLICATES PKs
-- DUPLICATED  PKs NEED TO BE REMOVED & PICK THE LATEST ENTRY AS THERE ARE SEVERAL ENTRIES WITH DEFFERENT DATES
SELECT CI.cst_id, COUNT(*)
FROM bronze.crm_customer_info AS CI
GROUP BY CI.cst_id
HAVING COUNT(*) > 1 OR CI.cst_id IS NULL;

---------------------------------------------------------------------------------


--CHECKING FOR UNWANTED SAPCING IN FIRSTNAME AND LASTNAME COLUMNS
--SPACING NEED TO BE REMOVED
SELECT CI.cst_firstname
FROM bronze.crm_customer_info AS CI
WHERE CI.cst_firstname != TRIM(cst_firstname);

--SPACING NEED TO BE REMOVED
SELECT CI.cst_lastname
FROM bronze.crm_customer_info AS CI
WHERE CI.cst_lastname = TRIM(cst_lastname);


---------------------------------------------------------------------------------

--CHECKING exploring cst_gndr data
--NNED TO REPLACE 'M' & 'F' TO ' Male' & 'Female', REPLACING NULL WITH 'N/A'
SELECT DISTINCT CI.cst_gndr
FROM bronze.crm_customer_info AS CI;

--CHECKING exploring cst_gndr data
--NNED TO REPLACE 'M' & 'S' TO ' Married' & 'Single', REPLACING NULL WITH 'N/A'
SELECT DISTINCT CI.cst_marital_status
FROM bronze.crm_customer_info AS CI;






/*
===============================================================================
exploring crm_product_info DATA
===============================================================================
*/

--CHECKING FOR NULLS OR DUPLICATES PKs
--NO Duplication
SELECT PI.prd_id, COUNT(*)
FROM bronze.crm_product_info AS PI
GROUP BY PI.prd_id
HAVING COUNT(*) > 1 OR PI.prd_id IS NULL;

--CHECKING FOR UNWANTED SAPCING IN FIRSTNAME AND LASTNAME COLUMNS
--NO SPACING NEED TO BE REMOVED
SELECT PI.prd_nm
FROM bronze.crm_product_info AS PI
WHERE PI.prd_nm != TRIM(prd_nm);


-- CHECKING THE prd_cost IF THERE ARE ANY NULLs OR NEGATIVE VALUES.
--2 NULLS ARE FOUND 
SELECT PI.prd_cost
FROM bronze.crm_product_info AS PI
WHERE PI.prd_cost < 0 OR PI.prd_cost IS NULL;


--NNED TO REPLACE 'M','R','S', 'T' TO 'Mountain', 'Road', 'Other Sales','Touring', REPLACING NULL WITH 'N/A'
SELECT DISTINCT PI.prd_line
FROM bronze.crm_product_info AS PI;

/*
===============================================================================
exploring crm_sales_details DATA
===============================================================================
*/
--Checking for dates Equal zeros
--date need to be adjusted from 0 to null  and date formate need to be fixed 
SELECT SD.sls_order_dt
FROM bronze.crm_sales_details AS SD
WHERE SD.sls_order_dt < =0 OR LEN(SD.sls_order_dt) != 8 ;-- checking for low quality data or wrong entries

----------------------------------------------------------------------------
--Checking for dates Equal zeros
-- date formate need to be fixed 
SELECT SD.sls_due_dt
FROM bronze.crm_sales_details AS SD
WHERE SD.sls_due_dt < =0 OR LEN(SD.sls_due_dt) != 8 ;-- checking for low quality data or wrong entries
----------------------------------------------------------------------------
--Checking for dates Equal zeros
-- date formate need to be fixed 
SELECT SD.sls_ship_dt
FROM bronze.crm_sales_details AS SD
WHERE SD.sls_ship_dt < =0 OR LEN(SD.sls_ship_dt) != 8 ;-- checking for low quality data or wrong entries
----------------------------------------------------------------------------
--Checking the data consistancy between sales, quanitiy and price 
-- low data quality is found as negative values, 0, null

SELECT DISTINCT SD.sls_sales, SD.sls_quantity, SD.sls_price
FROM bronze.crm_sales_details AS SD
WHERE SD.sls_sales <= 0 OR SD.sls_quantity <=0 OR SD.sls_price <=0
OR SD.sls_sales IS NULL OR SD.sls_quantity IS NULL OR SD.sls_price IS NULL
OR SD.sls_sales != SD.sls_quantity * SD.sls_price;


/*
===============================================================================
exploring erp_cust_az12 DATA
===============================================================================
*/
-- CID contains 'NAS' that should be removed  in order to be able to join it with 'cst_key' of crm_customer_info
SELECT *
FROM bronze.erp_cust_az12

--------------------------------------------------------------------------------------

--checking for low data quality as unconveniant Bdate

SELECT E2.BDATE
FROM bronze.erp_cust_az12 AS E2
WHERE E2.BDATE <'1924-01-01' OR E2.BDATE> GETDATE();

-------------------------------------------------------------------------------------
--Checking the gender data 
--gender data need fixation 'M','F' need to be in a readable form no entries and NULL should be 'N/A'
SELECT DISTINCT E2.GEN
FROM bronze.erp_cust_az12  AS E2;




/*
===============================================================================
exploring erp_loc_a101 DATA
===============================================================================
*/
--CID CONTAINS '-' That needs to be removed in order to be able to join it with the CID of crm_customer_ifo
SELECT *
FROM bronze.erp_loc_a101  AS EL;

---------------------------------------------------------------------------------
--Checking all the avilable Countries 
-- THERE is no value, and 
SELECT DISTINCT EL.CNTRY
FROM bronze.erp_loc_a101 AS EL;


/*
===============================================================================
exploring erp_px_cat_g1v2 DATA
===============================================================================
*/
-- NO transformation is needed
SELECT *
FROM bronze.erp_px_cat_g1v2;

-----------------------------------------------------------------------------------------------------------------------------









/*
===============================================================================
Inserting the cleaned data into silver.crm_customer_info
===============================================================================
*/


-- Loading silver.crm_customer_info

DECLARE @start_time DATETIME
DECLARE @end_time DATETIME

        SET @start_time = GETDATE();
		PRINT '>> Truncating Table: silver.crm_customer_info';
		TRUNCATE TABLE silver.crm_customer_info;
		PRINT '>> Inserting Cleaned Data Into: silver.crm_customer_info';

		INSERT INTO silver.crm_customer_info(
			cst_id, 
			cst_key, 
			cst_firstname, 
			cst_lastname, 
			cst_marital_status, 
			cst_gndr,
			cst_create_date
		)
        SELECT cst_id,
			cst_key,
			TRIM(cst_firstname) AS cst_firstname,
			TRIM(cst_lastname) AS cst_lastname,
			CASE 
				WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
				WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
				ELSE 'N/A'
			END AS cst_marital_status, -- Normalize marital status values to readable format
			CASE 
				WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
				WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
				ELSE 'N/A'
			END AS cst_gndr, -- Normalize gender values to readable format
			cst_create_date

		FROM (
			SELECT
				*,
				ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
			FROM bronze.crm_customer_info
			WHERE cst_id IS NOT NULL
		) AS D
		WHERE flag_last = 1; -- Select the most recent record per customer
		SET @end_time = GETDATE();
        PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds';
        PRINT '>> -------------';

/*
===============================================================================
Inserting the cleaned data into silver.crm_product_info
===============================================================================
*/


--------------------------------------------------------------------------------
-- Clean and load silver.crm_product_info
--------------------------------------------------------------------------------

		-- Loading silver.crm_product_info
        SET @start_time = GETDATE();
		PRINT '>> Truncating Table: silver.crm_product_info';
		TRUNCATE TABLE silver.crm_product_info;
		PRINT '>> Inserting Data Into: silver.crm_product_info';
		INSERT INTO silver.crm_product_info (
			prd_id,
			cat_id,
			prd_key,
			prd_nm,
			prd_cost,
			prd_line,
			prd_start_dt,
			prd_end_dt
		)
		SELECT
			prd_id,
			REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') AS cat_id, -- Extract category ID and replacing '-' with '_' to match cat_id in erp_px_cat_g1v2
			SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key,        -- Extract product key 
			prd_nm,
			ISNULL(prd_cost, 0) AS prd_cost, --replacing the NULLs with 0
			CASE 
				WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
				WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
				WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other Sales'
				WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
				ELSE 'N/A'
			END AS prd_line, -- REPLACE line codes to descriptive values
			CAST(prd_start_dt AS DATE) AS prd_start_dt,
			CAST(DATEADD(DAY, -1, LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)) AS DATE
	) AS prd_end_dt -- Calculate end date as one day before the next start date DATEADD is used to avoid Tthe "type clash" between int and date
		FROM bronze.crm_product_info;
        SET @end_time = GETDATE();
        PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds';
        PRINT '>> -------------';
   
   /*
   ===================================================================================
   Inserting the cleaned data into silver.crm_sales_details
   ===================================================================================
   */

   SET @start_time = GETDATE();
		PRINT '>> Truncating Table: silver.crm_sales_details';
		TRUNCATE TABLE silver.crm_sales_details;
		PRINT '>> Inserting Data Into: silver.crm_sales_details';
		INSERT INTO silver.crm_sales_details (
			sls_ord_num,
			sls_prd_key,
			sls_cust_id,
			sls_order_dt,
			sls_ship_dt,
			sls_due_dt,
			sls_sales,
			sls_quantity,
			sls_price
		)
		SELECT 
			sls_ord_num,
			sls_prd_key,
			sls_cust_id,
			CASE 
				WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL
				ELSE CONVERT(DATE, CAST(sls_due_dt AS VARCHAR),112)
			END AS sls_order_dt,
			CASE 
				WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 THEN NULL
				ELSE CONVERT(DATE, CAST(sls_due_dt AS VARCHAR),112)
			END AS sls_ship_dt,
			CASE 
				WHEN sls_due_dt = 0 OR LEN(sls_due_dt) != 8 THEN NULL
				ELSE CONVERT(DATE, CAST(sls_due_dt AS VARCHAR),112)
			END AS sls_due_dt,
			CASE 
				WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price) 
					THEN sls_quantity * ABS(sls_price)
				ELSE sls_sales
			END AS sls_sales, -- Recalculate sales if original value is missing or incorrect
			sls_quantity,
			CASE 
				WHEN sls_price IS NULL OR sls_price <= 0 
					THEN sls_sales / NULLIF(sls_quantity, 0)
				ELSE sls_price  -- Derive price if original value is invalid
			END AS sls_price
			FROM bronze.crm_sales_details;
        SET @end_time = GETDATE();
        PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds';
        PRINT '>> -------------';
		  /*
   ===================================================================================
   Inserting the cleaned data into silver.erp_cust_az12
   ===================================================================================
   */

        SET @start_time = GETDATE();
		PRINT '>> Truncating Table: silver.erp_cust_az12';
		TRUNCATE TABLE silver.erp_cust_az12;
		PRINT '>> Inserting Data Into: silver.erp_cust_az12';
		INSERT INTO silver.erp_cust_az12 (
			cid,
			bdate,
			gen
		)
		SELECT
			CASE
				WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid)) -- Remove 'NAS' prefix if present
				ELSE cid
			END AS cid, 
			CASE
				WHEN bdate > GETDATE()  OR bdate < '1924-01-01' THEN NULL
				ELSE bdate
			END AS bdate, -- Set future birthdates or more than 100 years old customer to NULL
			CASE
				WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
				WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
				ELSE 'N/A'
			END AS gen -- Normalize gender values and handle unknown cases
		FROM bronze.erp_cust_az12;
	    SET @end_time = GETDATE();
        PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds';
        PRINT '>> -------------';




	  /*
   ===================================================================================
   Inserting the cleaned data into silver.erp_loc-a101
   ===================================================================================
   */







		 SET @start_time = GETDATE();
		PRINT '>> Truncating Table: silver.erp_loc_a101';
		TRUNCATE TABLE silver.erp_loc_a101;
		PRINT '>> Inserting Data Into: silver.erp_loc_a101';
		INSERT INTO silver.erp_loc_a101 (
			cid,
			cntry
		)
		SELECT
			REPLACE(cid, '-', '') AS cid, 
			CASE
				WHEN TRIM(cntry) = 'DE' THEN 'Germany'
				WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'
				WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'N/A'
				ELSE TRIM(cntry)
			END AS cntry -- Normalize and Handle missing or blank country codes
		FROM bronze.erp_loc_a101;
	    SET @end_time = GETDATE();
        PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds';
        PRINT '>> -------------';


			  /*
   ===================================================================================
   Inserting the cleaned data into silver.erp_px_cat_g1v2
   ===================================================================================
   */





		SET @start_time = GETDATE();
		PRINT '>> Truncating Table: silver.erp_px_cat_g1v2';
		TRUNCATE TABLE silver.erp_px_cat_g1v2;
		PRINT '>> Inserting Data Into: silver.erp_px_cat_g1v2';
		INSERT INTO silver.erp_px_cat_g1v2 (
			id,
			cat,
			subcat,
			maintenance
		)
		SELECT
			id,
			cat,
			subcat,
			maintenance
		FROM bronze.erp_px_cat_g1v2;
		SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds';
        PRINT '>> -------------';
---------------------------------------------------------------------------------------

BEGIN TRY

	SET @end_time = GETDATE();
PRINT '=========================================='
PRINT ' Loading Silver Layer is Completed';
PRINT '   - Total Load Duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds';
PRINT '=========================================='

END TRY

BEGIN CATCH
    PRINT '=========================================='
    PRINT ' ERROR OCCURRED DURING LOADING SILVER LAYER'
    PRINT '   - Error Message: ' + ERROR_MESSAGE();
    PRINT '   - Error Number : ' + CAST(ERROR_NUMBER() AS NVARCHAR);
    PRINT '   - Error State  : ' + CAST(ERROR_STATE() AS NVARCHAR);
    PRINT '=========================================='


END CATCH;
